# ==================================================================================================
#     Header
# ==================================================================================================

# General settings
language: cpp
cache: apt

# Jobs are on linux/bionic unless specified otherwise
os: linux
dist: bionic

# We only want to run specific branches
branches:
  only:
    - master
    - misc

# ==================================================================================================
#     Job Matrix
# ==================================================================================================

jobs:
  include:

    # ==========================================================================
    #     trusty
    # ==========================================================================

    # # Cannot use gcc 4.8 because of missing regex implementation.
    # # default
    # - os: linux
    #   dist: trusty
    #   name: "trusty / default"

    # # --------------------------------------------------------------------------
    # #     trusty / gcc
    # # --------------------------------------------------------------------------
    #
    # # Cannot use gcc 4.8 because of missing regex implementation.
    # # - os: linux
    # #   dist: trusty
    # #   addons:
    # #     apt:
    # #       packages:
    # #         - g++-4.8
    # #   env: COMPILER=g++-4.8
    #
    # - os: linux
    #   dist: trusty
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-4.9
    #   env: COMPILER=g++-4.9
    #
    # - os: linux
    #   dist: trusty
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-5
    #   env: COMPILER=g++-5
    #
    # - os: linux
    #   dist: trusty
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-6
    #   env: COMPILER=g++-6
    #
    # - os: linux
    #   dist: trusty
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-7
    #   env: COMPILER=g++-7
    #
    # - os: linux
    #   dist: trusty
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #        - g++-8
    #   env: COMPILER=g++-8
    #
    # - os: linux
    #   dist: trusty
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-9
    #   env: COMPILER=g++-9

    # --------------------------------------------------------------------------
    #     trusty / clang
    # --------------------------------------------------------------------------

    # Cannot use clang++ 3.5 because exception_ptr is not yet implemented.
    # - os: linux
    #   dist: trusty
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-3.5
    #   env: COMPILER=clang++-3.5 OPENMP=OFF

    # - os: linux
    #   dist: trusty
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-3.6
    #   env: COMPILER=clang++-3.6 OPENMP=OFF
    #
    # # TODO somehow, this just does not work...
    # # - os: linux
    # #   dist: trusty
    # #   addons:
    # #     apt:
    # #       sources:
    # #         - ubuntu-toolchain-r-test
    # #         - llvm-toolchain-trusty-3.7
    # #       packages:
    # #         - clang-3.7
    # #   env: COMPILER=clang++-3.7 OPENMP=OFF
    #
    # - os: linux
    #   dist: trusty
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-3.8
    #         - libiomp-dev
    #   env: COMPILER=clang++-3.8
    #
    # - os: linux
    #   dist: trusty
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-3.9
    #         - libiomp-dev
    #   env: COMPILER=clang++-3.9

    # ==========================================================================
    #     xenial
    # ==========================================================================

    # # default
    # - os: linux
    #   dist: xenial
    #   name: "xenial / default"

    # # --------------------------------------------------------------------------
    # #     xenial / gcc
    # # --------------------------------------------------------------------------
    #
    # # Cannot use gcc 4.8 because of missing regex implementation.
    # # - os: linux
    # #   dist: xenial
    # #   addons:
    # #     apt:
    # #       packages:
    # #         - g++-4.8
    # #   env: COMPILER=g++-4.8
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-4.9
    #   env: COMPILER=g++-4.9
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-5
    #   env: COMPILER=g++-5
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-6
    #   env: COMPILER=g++-6
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-7
    #   env: COMPILER=g++-7
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-8
    #   env: COMPILER=g++-8
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-9
    #   env: COMPILER=g++-9
    #
    # # --------------------------------------------------------------------------
    # #     xenial / clang
    # # --------------------------------------------------------------------------
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-3.5
    #   env: COMPILER=clang++-3.5 OPENMP=OFF
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-3.6
    #   env: COMPILER=clang++-3.6 OPENMP=OFF
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-3.7
    #   env: COMPILER=clang++-3.7 OPENMP=OFF
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-3.8
    #         - libiomp-dev
    #   env: COMPILER=clang++-3.8
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-3.9
    #         - libiomp-dev
    #   env: COMPILER=clang++-3.9
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-4.0
    #         - libiomp-dev
    #   env: COMPILER=clang++-4.0
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-5.0
    #         - libiomp-dev
    #   env: COMPILER=clang++-5.0
    #
    # - os: linux
    #   dist: xenial
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - clang-6.0
    #         - libiomp-dev
    #   env: COMPILER=clang++-6.0
    #
    # ==========================================================================
    #     bionic
    # ==========================================================================

    # # default
    # - os: linux
    #   dist: bionic
    #   name: "bionic / default"

    # --------------------------------------------------------------------------
    #     bionic / gcc
    # --------------------------------------------------------------------------

    # Cannot use gcc 4.8 because of missing regex implementation.
    # - os: linux
    #   dist: bionic
    #   addons: { apt: { sources: ["ubuntu-toolchain-r-test"], packages: ["g++-4.8"] } }
    #   env: COMPILER=g++-4.8

    # - os: linux
    #   dist: bionic
    #   addons: { apt: { sources: ["ubuntu-toolchain-r-test"], packages: ["g++-5"] } }
    #   env: COMPILER=g++-5
    #
    # - os: linux
    #   dist: bionic
    #   addons: { apt: { sources: ["ubuntu-toolchain-r-test"], packages: ["g++-6"] } }
    #   env: COMPILER=g++-6
    #
    # - os: linux
    #   dist: bionic
    #   addons: { apt: { sources: ["ubuntu-toolchain-r-test"], packages: ["g++-7"] } }
    #   env: COMPILER=g++-7
    #
    # - os: linux
    #   dist: bionic
    #   addons: { apt: { sources: ["ubuntu-toolchain-r-test"], packages: ["g++-8"] } }
    #   env: COMPILER=g++-8
    #
    # - os: linux
    #   dist: bionic
    #   addons: { apt: { sources: ["ubuntu-toolchain-r-test"], packages: ["g++-9"] } }
    #   env: COMPILER=g++-9
    #
    # - os: linux
    #   dist: bionic
    #   addons: { apt: { sources: ["ubuntu-toolchain-r-test"], packages: ["g++-10"] } }
    #   env: COMPILER=g++-10

    # --------------------------------------------------------------------------
    #     bionic / clang
    # --------------------------------------------------------------------------

    - os: linux
      dist: bionic
      addons: { apt: { sources: ["ubuntu-toolchain-r-test"], packages: ["clang-5.0", "libiomp-dev", "libiomp5"] } }
      env: COMPILER=clang++-5.0


    # NB: from clang 5.0 on, we need different (individual) openmp packages for each version

#     - os: linux
#       dist: bionic
#       addons: { apt: { sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-bionic-3.9"], packages: ["clang-3.9", "libiomp-dev"] } }
#       env: COMPILER=clang++-3.9
#
#     - os: linux
#       dist: bionic
#       addons: { apt: { sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-bionic-4.0"], packages: ["clang-4.0", "libiomp-dev", "libomp5"] } }
#       env: COMPILER=clang++-4.0
#
#     - os: linux
#       dist: bionic
#       addons: { apt: { sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-bionic-5.0", "llvm-toolchain-5.0"], packages: ["clang-5.0", "libomp-dev", "libomp5"] } }
#       env: COMPILER=clang++-5.0
#
#     - os: linux
#       dist: bionic
#       addons: { apt: { sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-bionic-6.0"], packages: ["clang-6.0", "libomp-dev"] } }
#       env: COMPILER=clang++-6.0
#
#
#  try https://stackoverflow.com/questions/37969440/clang-openmp-and-cmake
#  https://cmake.org/pipermail/cmake/2018-May/067474.html
#  https://github.com/UCL/STIR/issues/117#issuecomment-337970257
#
# https://cmake.org/cmake/help/v3.9/module/FindOpenMP.html
#
# maybe different compile and link flags necessary: https://stackoverflow.com/a/42887226
#
#     - os: linux
#       dist: bionic
#       addons:
#         apt:
#           sources:
#             - ubuntu-toolchain-r-test
#             - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
#           packages:
#             - clang-6.0
#             - libiomp-dev
#       env: COMPILER=clang++-6.0
#       name: goodboi
#
#
#     - os: linux
#       dist: bionic
#       addons:
#         apt:
#           sources:
#             - ubuntu-toolchain-r-test
#             - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
#             - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-6 main'
#           packages:
#             - clang-6.0
#             - libiomp-dev
#             # - libomp-6-dev
#       env: COMPILER=clang++-6.0
#       name: goodboi6
#
#       # Unable to locate package libomp-6-dev
#
#     - os: linux
#       dist: bionic
#       addons:
#         apt:
#           sources:
#             - ubuntu-toolchain-r-test
#             - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
#             - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main'
#           packages:
#             - clang-7.0
#             - libiomp-dev
#             - libomp-7-dev
#       env: COMPILER=clang++-7.0
#       name: goodboi7
#
#
#
#     - os: linux
#       dist: bionic
#       addons: { apt: { sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-bionic-7"], packages: ["clang-7", "libomp-7-dev"] } }
#       env: COMPILER=clang++-7
#
#     - os: linux
#       dist: bionic
#       addons: { apt: { sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-8"], packages: ["clang-8", "libomp-8-dev", "libomp-dev"] } }
#       env: COMPILER=clang++-8
#
#     - os: linux
#       dist: bionic
#       addons: { apt: { sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-9"], packages: ["clang-9"] } }
#       # addons: { apt: { sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-bionic-9"], packages: ["clang-9", "libomp-9-dev", "libomp5"] } }
#       env: COMPILER=clang++-9

    # # ==========================================================================
    # #     osx
    # # ==========================================================================
    #
    # - os: osx
    #   env: OPENMP=OFF
    #   name: "osx / default"
    #
    # - os: osx
    #   osx_image: xcode8.3
    #   env: OPENMP=OFF
    #   name: "osx / xcode8.3"
    #
    # - os: osx
    #   osx_image: xcode9.2
    #   env: OPENMP=OFF
    #   name: "osx / xcode9.2"
    #
    # - os: osx
    #   osx_image: xcode10
    #   env: OPENMP=OFF
    #   name: "osx / xcode10"
    #
    # - os: osx
    #   osx_image: xcode11
    #   env: OPENMP=OFF
    #   name: "osx / xcode11"
    #
    # - os: osx
    #   osx_image: xcode11.3
    #   env: OPENMP=OFF
    #   name: "osx / xcode11.3"

  allow_failures:

    # The default trusty gcc version is 4.8, which does not properly support regex.
    # As of now, it still compiles, but some tests that need functions with regexes fail.
    # This is okay, as we do not need that level of backwards compatibility.
    - name: "trusty / default"

# ==================================================================================================
#     Install
# ==================================================================================================

before_install:

  # --------------------------------------------------------------------------
  #     Toolchain
  # --------------------------------------------------------------------------

  # List available gcc and clang versions
  # - apt-cache pkgnames g++ | sort
  # - apt-cache pkgnames clang | sort

  # install ubuntu toolchain
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      echo "adding toolchain"
      sudo apt-get install -y software-properties-common
      sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
      sudo apt-get update -qq
    fi

  # --------------------------------------------------------------------------
  #     Paths and Environment
  # --------------------------------------------------------------------------

  # The following homebrew packages are not on the path by default. We need to prepend them to the
  # path explicitly, so that clang can find OpenMP.
  # set llvm path
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      echo "exporting llvm path"
      export PATH="$(brew --prefix llvm)/bin:$PATH";
    fi

  # We need a few backs and forths between the variables, in the following order:
  #  1. For default builds, COMPILER is not set, so we use CXX instead.
  #  2. We also need to set CXX, as travis is so nice as to override this otherwise.
  - if [[ "${COMPILER}" == "" ]]; then COMPILER=${CXX}; fi
  - export CXX=${COMPILER}

  # Tests from when clang 3.7 did not work. Might also have other benefits, see
  # https://github.com/ldionne/hana/blob/a5923b48456e47174cf62ae580b003605b297590/.travis.yml#L146
  # https://github.com/acgetchell/CDT-test/blob/master/.travis.yml#L42
  # - if [[ "${COMPILER}" == "default" ]]; then COMPILER=clang++-7; fi
  # - if [[ "${COMPILER}" == "clang++" ]]; then COMPILER=clang++-7; fi
  # - if [[ "$CXX" == "g++" ]]; then export CXX="g++-9" CC="gcc-9"; fi
  # - if [[ "$CXX" == "clang++" ]]; then export CXX="clang++-10" CC="clang-10"; fi

install:

  # --------------------------------------------------------------------------
  #     Directories
  # --------------------------------------------------------------------------

  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}"
  - cd "${DEPS_DIR}"

  # --------------------------------------------------------------------------
  #     Clang libc++
  # --------------------------------------------------------------------------

  # clang install libc++
  # based on https://github.com/ldionne/hana/blob/master/.travis.yml
  - |
    LLVM_INSTALL=${DEPS_DIR}/llvm/install
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CXX%%+*}" == "clang" ]]; then
      if   [[ "${CXX}" == "clang++-3.5" ]]; then LLVM_VERSION="3.5.1";
      elif [[ "${CXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
      elif [[ "${CXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.1";
      elif [[ "${CXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.1";
      elif [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
      elif [[ "${CXX}" == "clang++-4.0" ]]; then LLVM_VERSION="4.0.1";
      elif [[ "${CXX}" == "clang++-5.0" ]]; then LLVM_VERSION="5.0.2";
      elif [[ "${CXX}" == "clang++-6.0" ]]; then LLVM_VERSION="6.0.1";
      elif [[ "${CXX}" == "clang++-7" ]];   then LLVM_VERSION="7.0.1";
      elif [[ "${CXX}" == "clang++-8" ]];   then LLVM_VERSION="8.0.0";
      elif [[ "${CXX}" == "clang++-9" ]];   then LLVM_VERSION="9.0.0";
      else
        echo "Unknown clang version ${CXX}"
        exit 1
      fi

      # bionic clang 3.9 and 4.0 miss a file in their libc++, hence linking fails
      # solution from https://github.com/carla-simulator/carla/issues/503#issuecomment-397658790
      if [[ "${TRAVIS_DIST}" == "bionic" ]] && [[ "${CXX}" == "clang++-3.9" ||  "${CXX}" == "clang++-4.0" ]]; then
        sudo ln -s /usr/include/locale.h /usr/include/xlocale.h
      fi

      if [[ "${TRAVIS_DIST}" == "bionic" ]] ; then

        # export LDFLAGS=" -l c++"

      else

        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"

        mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
        travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
        travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
        travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
        (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})
        (cd llvm/build/projects/libcxx && make install -j2)
        (cd llvm/build/projects/libcxxabi && make install -j2)

        export CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
        export LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"

      fi
    fi

# ==================================================================================================
#     Script
# ==================================================================================================

before_script:

  # --------------------------------------------------------------------------
  #     Info Output
  # --------------------------------------------------------------------------

  # travis environment
  - echo "PATH = $PATH"
  - echo "HOME = $HOME"
  - echo ${CXX}
  - echo ${COMPILER}
  - ${CXX} --version
  - ${COMPILER} --version
  - cmake --version

script:

  # --------------------------------------------------------------------------
  #     Build Script
  # --------------------------------------------------------------------------

  - cd "${TRAVIS_BUILD_DIR}"

  - cd tools/cmake


  # TODO

  - ${CXX} -fopenmp clangomp.cpp -o clangomp1
  - ./clangomp1

  - ${CXX} -std=c++11 -Wall -Wextra -Wno-unknown-pragmas -pedantic -pedantic-errors -fopenmp clangomp.cpp -o clangomp2
  - ./clangomp2

  - ${CXX} -Wall -Wextra -Wno-unknown-pragmas -pedantic -pedantic-errors -fopenmp clangomp.cpp -o clangomp3
  - ./clangomp3

  - ${CXX} -std=c++11 -fopenmp clangomp.cpp -o clangomp4
  - ./clangomp4

  # - ${CXX} -isystem ${LLVM_INSTALL}/include/c++/v1 -isystem /home/travis/build/lczech/genesis/deps/llvm/install/lib/c++/v1 -isystem /home/travis/build/lczech/genesis/deps/llvm/install/include/c++/v1 -std=c++11 -Wall -Wextra -Wno-unknown-pragmas -pedantic -pedantic-errors -fopenmp -L ${LLVM_INSTALL}/lib -l c++ -l c++abi clangomp.cpp -o clangomp5
  # - ./clangomp5
  #
  # - ${CXX} -isystem /home/travis/build/lczech/genesis/deps/llvm/install/include/c++/v1 -std=c++11 -Wall -Wextra -Wno-unknown-pragmas -pedantic -pedantic-errors -fopenmp clangomp.cpp -o clangomp6
  # - ./clangomp6

  - cd "${TRAVIS_BUILD_DIR}"

  # set up directories
  - mkdir build
  - cd build

  # export cmake variables
  - export GENESIS_DEBUG=1
  - export GENESIS_USE_OPENMP=ON
  - if [[ "${OPENMP}" == "OFF" ]]; then export GENESIS_USE_OPENMP=OFF; fi

  # build
  - cmake -DCMAKE_CXX_COMPILER=$COMPILER -DGENESIS_USE_OPENMP=$GENESIS_USE_OPENMP ..

  - cat CMakeFiles/CMakeError.log

  - make
  - cd ..

  # run tests
  - ./bin/test/genesis_tests

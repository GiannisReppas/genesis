#include <utility>
#include <genesis/tree/function/operators.hpp>
#include <genesis/tree/tree.hpp>
#include <genesis/tree/tree/edge.hpp>
#include <genesis/tree/tree/edge_data.hpp>
#include <genesis/tree/tree/link.hpp>
#include <genesis/tree/tree/node.hpp>
#include <genesis/tree/tree/node_data.hpp>
#include <genesis/utils/core/range.hpp>
#include <initializer_list>
#include <ios>
#include <iterator>
#include <locale>
#include <memory>
#include <ostream>
#include <sstream> // __str__
#include <streambuf>
#include <string>
#include <vector>

#include <src/common.hpp>

// #include <pybind11/pybind11.h>
//
// #ifndef BINDER_PYBIND11_TYPE_CASTER
// 	#define BINDER_PYBIND11_TYPE_CASTER
// 	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
// 	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
// #endif

void bind_genesis_tree_tree(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // genesis::tree::Tree file:genesis/tree/tree.hpp line:88
		pybind11::class_<genesis::tree::Tree, std::shared_ptr<genesis::tree::Tree>> cl(M("genesis::tree"), "Tree", "Class for representing phylogenetic trees.\n\n A tree in this implementation consists of three types of elements: Links, Nodes and Edges.\n The topoloty of the tree is completely described by the links, while nodes and edges add the\n capability to store data on the tree.\n\n Data in the Tree is not directly stored in the elements (Links, Nodes, Edges) of the Tree.\n Instead, data belonging to nodes and edges can be stored in their data pointers. For this,\n the data classes need to derive from BaseNodeData and BaseEdgeData, respectively.\n\n Additional information concerning the whole tree, as well as special algorithms working on the\n tree and its data are also not direct members of the tree - for reasons of flexibility\n and extensibility: Instead of adding more and more data and algorithms to the tree, we create\n new classes that encapsulate a tree and all the other needed code to work with it.\n See the Sample class for an example.\n\n Thus, the tree itself only contains the needed information to store and work with a topology.\n\n This class has several redundant ways of representing the same information. On the one hand, this\n makes using a Tree easy, as one can chose the representaion of data that best fits a given task.\n On the other hand, maintaining all those invariants when changing the tree topology is tedious.\n Here is a (comprehensive?) list of invariants of this class:\n\n  *  The indices in all three arrays (nodes(), links() and edges()) have to match the index\n     integers stored in those elements: `node_at(i).index() == i`.\n  *  The link that is stored in a node has to be the one pointing towards the root.\n  *  The primary link of an edge has to point towards the root, the secondary away from it.\n\n Those invariants are established when the Tree is constructed.");
		pybind11::handle cl_type = cl;

		cl.def(pybind11::init<>());

		cl.def(pybind11::init<const class genesis::tree::Tree &>(), pybind11::arg("other"));

		cl.def("assign", (class genesis::tree::Tree & (genesis::tree::Tree::*)(const class genesis::tree::Tree &)) &genesis::tree::Tree::operator=, "C++: genesis::tree::Tree::operator=(const class genesis::tree::Tree &) --> class genesis::tree::Tree &", pybind11::return_value_policy::automatic, pybind11::arg("other"));
		cl.def("clone_topology", (class genesis::tree::Tree (genesis::tree::Tree::*)() const) &genesis::tree::Tree::clone_topology, "C++: genesis::tree::Tree::clone_topology() const --> class genesis::tree::Tree");
		cl.def("swap", (void (genesis::tree::Tree::*)(class genesis::tree::Tree &)) &genesis::tree::Tree::swap, "C++: genesis::tree::Tree::swap(class genesis::tree::Tree &) --> void", pybind11::arg("other"));
		cl.def("clear", (void (genesis::tree::Tree::*)()) &genesis::tree::Tree::clear, "C++: genesis::tree::Tree::clear() --> void");
		cl.def("empty", (bool (genesis::tree::Tree::*)() const) &genesis::tree::Tree::empty, "C++: genesis::tree::Tree::empty() const --> bool");
		cl.def("root_link", (class genesis::tree::TreeLink & (genesis::tree::Tree::*)()) &genesis::tree::Tree::root_link, "C++: genesis::tree::Tree::root_link() --> class genesis::tree::TreeLink &", pybind11::return_value_policy::automatic);
		cl.def("root_link", (const class genesis::tree::TreeLink & (genesis::tree::Tree::*)() const) &genesis::tree::Tree::root_link, "C++: genesis::tree::Tree::root_link() const --> const class genesis::tree::TreeLink &", pybind11::return_value_policy::automatic);
		cl.def("root_node", (class genesis::tree::TreeNode & (genesis::tree::Tree::*)()) &genesis::tree::Tree::root_node, "C++: genesis::tree::Tree::root_node() --> class genesis::tree::TreeNode &", pybind11::return_value_policy::automatic);
		cl.def("root_node", (const class genesis::tree::TreeNode & (genesis::tree::Tree::*)() const) &genesis::tree::Tree::root_node, "C++: genesis::tree::Tree::root_node() const --> const class genesis::tree::TreeNode &", pybind11::return_value_policy::automatic);
		cl.def("link_at", (class genesis::tree::TreeLink & (genesis::tree::Tree::*)(unsigned long)) &genesis::tree::Tree::link_at, "C++: genesis::tree::Tree::link_at(unsigned long) --> class genesis::tree::TreeLink &", pybind11::return_value_policy::automatic, pybind11::arg("index"));
		cl.def("link_at", (const class genesis::tree::TreeLink & (genesis::tree::Tree::*)(unsigned long) const) &genesis::tree::Tree::link_at, "C++: genesis::tree::Tree::link_at(unsigned long) const --> const class genesis::tree::TreeLink &", pybind11::return_value_policy::automatic, pybind11::arg("index"));
		cl.def("node_at", (class genesis::tree::TreeNode & (genesis::tree::Tree::*)(unsigned long)) &genesis::tree::Tree::node_at, "C++: genesis::tree::Tree::node_at(unsigned long) --> class genesis::tree::TreeNode &", pybind11::return_value_policy::automatic, pybind11::arg("index"));
		cl.def("node_at", (const class genesis::tree::TreeNode & (genesis::tree::Tree::*)(unsigned long) const) &genesis::tree::Tree::node_at, "C++: genesis::tree::Tree::node_at(unsigned long) const --> const class genesis::tree::TreeNode &", pybind11::return_value_policy::automatic, pybind11::arg("index"));
		cl.def("edge_at", (class genesis::tree::TreeEdge & (genesis::tree::Tree::*)(unsigned long)) &genesis::tree::Tree::edge_at, "C++: genesis::tree::Tree::edge_at(unsigned long) --> class genesis::tree::TreeEdge &", pybind11::return_value_policy::automatic, pybind11::arg("index"));
		cl.def("edge_at", (const class genesis::tree::TreeEdge & (genesis::tree::Tree::*)(unsigned long) const) &genesis::tree::Tree::edge_at, "C++: genesis::tree::Tree::edge_at(unsigned long) const --> const class genesis::tree::TreeEdge &", pybind11::return_value_policy::automatic, pybind11::arg("index"));
		cl.def("link_count", (unsigned long (genesis::tree::Tree::*)() const) &genesis::tree::Tree::link_count, "C++: genesis::tree::Tree::link_count() const --> unsigned long");
		cl.def("node_count", (unsigned long (genesis::tree::Tree::*)() const) &genesis::tree::Tree::node_count, "C++: genesis::tree::Tree::node_count() const --> unsigned long");
		cl.def("edge_count", (unsigned long (genesis::tree::Tree::*)() const) &genesis::tree::Tree::edge_count, "C++: genesis::tree::Tree::edge_count() const --> unsigned long");
		cl.def("reset_root_link_index", (class genesis::tree::Tree & (genesis::tree::Tree::*)(unsigned long)) &genesis::tree::Tree::reset_root_link_index, "C++: genesis::tree::Tree::reset_root_link_index(unsigned long) --> class genesis::tree::Tree &", pybind11::return_value_policy::automatic, pybind11::arg("val"));
		cl.def("expose_link_container", (class std::vector<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > > > & (genesis::tree::Tree::*)()) &genesis::tree::Tree::expose_link_container, "C++: genesis::tree::Tree::expose_link_container() --> class std::vector<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > > > &", pybind11::return_value_policy::automatic);
		cl.def("expose_node_container", (class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > & (genesis::tree::Tree::*)()) &genesis::tree::Tree::expose_node_container, "C++: genesis::tree::Tree::expose_node_container() --> class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > &", pybind11::return_value_policy::automatic);
		cl.def("expose_edge_container", (class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > & (genesis::tree::Tree::*)()) &genesis::tree::Tree::expose_edge_container, "C++: genesis::tree::Tree::expose_edge_container() --> class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > &", pybind11::return_value_policy::automatic);
		// cl.def("begin_links", (class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > > > > (genesis::tree::Tree::*)()) &genesis::tree::Tree::begin_links, "C++: genesis::tree::Tree::begin_links() --> class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > > > >");
		// cl.def("begin_links", (class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > > > > (genesis::tree::Tree::*)() const) &genesis::tree::Tree::begin_links, "C++: genesis::tree::Tree::begin_links() const --> class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > > > >");
		// cl.def("end_links", (class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > > > > (genesis::tree::Tree::*)()) &genesis::tree::Tree::end_links, "C++: genesis::tree::Tree::end_links() --> class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > > > >");
		// cl.def("end_links", (class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > > > > (genesis::tree::Tree::*)() const) &genesis::tree::Tree::end_links, "C++: genesis::tree::Tree::end_links() const --> class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeLink, struct std::default_delete<class genesis::tree::TreeLink> > > > >");
		// cl.def("begin_nodes", (class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > > (genesis::tree::Tree::*)()) &genesis::tree::Tree::begin_nodes, "C++: genesis::tree::Tree::begin_nodes() --> class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > >");
		// cl.def("begin_nodes", (class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > > (genesis::tree::Tree::*)() const) &genesis::tree::Tree::begin_nodes, "C++: genesis::tree::Tree::begin_nodes() const --> class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > >");
		// cl.def("end_nodes", (class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > > (genesis::tree::Tree::*)()) &genesis::tree::Tree::end_nodes, "C++: genesis::tree::Tree::end_nodes() --> class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > >");
		// cl.def("end_nodes", (class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > > (genesis::tree::Tree::*)() const) &genesis::tree::Tree::end_nodes, "C++: genesis::tree::Tree::end_nodes() const --> class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > >");
		// cl.def("nodes", (class genesis::utils::Range<class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > > > (genesis::tree::Tree::*)() const) &genesis::tree::Tree::nodes, "C++: genesis::tree::Tree::nodes() const --> class genesis::utils::Range<class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeNode, struct std::default_delete<class genesis::tree::TreeNode> > > > > >");
		// cl.def("begin_edges", (class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > > (genesis::tree::Tree::*)()) &genesis::tree::Tree::begin_edges, "C++: genesis::tree::Tree::begin_edges() --> class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > >");
		// cl.def("begin_edges", (class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > > (genesis::tree::Tree::*)() const) &genesis::tree::Tree::begin_edges, "C++: genesis::tree::Tree::begin_edges() const --> class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > >");
		// cl.def("end_edges", (class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > > (genesis::tree::Tree::*)()) &genesis::tree::Tree::end_edges, "C++: genesis::tree::Tree::end_edges() --> class __gnu_cxx::__normal_iterator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > >");
		// cl.def("end_edges", (class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > > (genesis::tree::Tree::*)() const) &genesis::tree::Tree::end_edges, "C++: genesis::tree::Tree::end_edges() const --> class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > >");
		// cl.def("edges", (class genesis::utils::Range<class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > > > (genesis::tree::Tree::*)() const) &genesis::tree::Tree::edges, "C++: genesis::tree::Tree::edges() const --> class genesis::utils::Range<class __gnu_cxx::__normal_iterator<const class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > *, class std::vector<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> >, class std::allocator<class std::unique_ptr<class genesis::tree::TreeEdge, struct std::default_delete<class genesis::tree::TreeEdge> > > > > >");

		cl.def("__str__", [](genesis::tree::Tree const &o) -> std::string { std::ostringstream s; s << o; return s.str(); } );
	}
}

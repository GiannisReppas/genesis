# ==================================================================================================
#     Header
# ==================================================================================================

name: ci-build-test
on:
  pull_request:
  push:
    branches:
      - master
      - misc

# ==================================================================================================
#     Jobs
# ==================================================================================================

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}

    # ==========================================================================
    #     Matrix
    # ==========================================================================

    strategy:
      fail-fast: false

      matrix:
        os:
          # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners
          - ubuntu-22.04
          - ubuntu-20.04
          - macos-12
          - macos-11
        compiler:
          # Older GCC versions are not supported by Ubuntu any more
          # - gcc-5
          # - gcc-6
          - gcc-7
          - gcc-8
          - gcc-9
          - gcc-10
          - gcc-11
          - gcc-12
          - llvm-5
          - llvm-6
          - llvm-7
          - llvm-8
          - llvm-9
          - llvm-10
          - llvm-11
          - llvm-12
        build_type:
          - DEBUG
          # - RELEASE

        include:
          # Also test release version with both compilers and OSs
          - os: ubuntu-latest
            compiler: gcc
            build_type: RELEASE
          - os: ubuntu-latest
            compiler: llvm
            build_type: RELEASE
          - os: macos-latest
            compiler: gcc
            build_type: RELEASE
          - os: macos-latest
            compiler: llvm
            build_type: RELEASE

        exclude:
            # Older GCC versions are not supported by Ubuntu any more
          - os: ubuntu-22.04
            compiler: gcc-7
          - os: ubuntu-22.04
            compiler: gcc-8

    # ==========================================================================
    #     Steps
    # ==========================================================================

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Setup C++
        # Reference: https://github.com/marketplace/actions/setup-cpp-c-c
        uses: aminya/setup-cpp@v0.22.0
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true

      - name: Install Dependencies - Ubuntu
        if: runner.os == 'linux'
        # htslib dependencies, see https://github.com/samtools/htslib/blob/develop/INSTALL
        run: |
          sudo apt-get install autoconf automake zlib1g-dev libbz2-dev liblzma-dev
        # sudo apt-get remove autoconf
        # sudo apt-get install autoconf2.64 liblzma-dev libbz2-dev

      - name: Install Dependencies - MacOS
        if: runner.os == 'macos'
        # The commands below were try and error with the CI...
        run: |
          brew install autoconf automake libomp
        # brew uninstall --ignore-dependencies autoconf
        # brew install autoconf@2.69
        # echo 'export PATH="/usr/local/opt/autoconf@2.69/bin:$PATH"' >> /Users/runner/.bash_profile

      - name: Configure
        run: |
          export GENESIS_DEBUG=ON
          export GENESIS_USE_OPENMP=ON
          export GENESIS_USE_HTSLIB=ON
          if [[ "${{ matrix.build_type }}" == "RELEASE" ]]; then export GENESIS_DEBUG=OFF; fi

          cmake -S . -B ./build -DGENESIS_USE_OPENMP=${GENESIS_USE_OPENMP} -DGENESIS_USE_HTSLIB=${GENESIS_USE_HTSLIB}

      - name: Build
        # Below we use a workaround for LLVM as configured by setup-cpp, which clashes with htslib:
        # https://github.com/samtools/htslib/issues/1527 and
        # https://github.com/aminya/setup-cpp/issues/145
        run: |
          if [[ ! -z "${LLVM_PATH}" ]]; then
            export LDFLAGS=`echo ${LDFLAGS} | sed 's/"//g'`
            export CPPFLAGS=`echo ${CPPFLAGS} | sed 's/"//g'`
          fi
          cmake --build ./build -- -j 2

      - name: Tests
        if: >
          runner.os != 'windows' &&
          matrix.build_type == 'DEBUG'
        run: |
          ./bin/test/genesis_tests

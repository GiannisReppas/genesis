/**
 * @brief Documentation strings for the genesis Python module.
 *
 * @file
 * @ingroup python
 */

#include <map>
#include <string>
#include <utility>

static std::map<std::pair<std::string, std::string>, std::string> doc_strings_ = {
    {{"BipartitionSet", "find_smallest_subtree"}, "Finds the smallest subtree (measured in number of nodes) that contains all given nodes."},
    {{"Bitvector", "count"}, "Counts the number of set bits in the Bitvector."},
    {{"Bitvector", "flip"}, "Flips (inverts) the value of a single bit, with boundary check."},
    {{"Bitvector", "get"}, "Returns the value of a single bit, with boundary check."},
    {{"Bitvector", "hash"}, "Returns an std::hash value for the Bitvector."},
    {{"Bitvector", "invert"}, "Flip all bits."},
    {{"Bitvector", "normalize"}, "Brings the Bitvector in a normalized form, where the first bit is always zero."},
    {{"Bitvector", "reset"}, "Reset all the bits to false. If provided with parameter true, sets all bits to true."},
    {{"Bitvector", "set"}, "Sets the value of a single bit to true, with boundary check."},
    {{"Bitvector", "set"}, "Sets the value of a single bit to a given bool value, with boundary check."},
    {{"Bitvector", "size"}, "Returns the size (number of total bits) of this Bitvector."},
    {{"Bitvector", "unset"}, "Sets the value of a single bit to false, with boundary check."},
    {{"Bitvector", "x_hash"}, "Returns a hash value of type IntType, that is quicker to calculate than hash(), and thus can be used where the std::hash is not needed."},
    {{"DefaultTreeEdgeData", "from_newick_broker_element"}, "Fills the edge with data from a NewickBrokerElement."},
    {{"DefaultTreeNodeData", "from_newick_broker_element"}, "Fills the node with data from a NewickBrokerElement."},
    {{"JplaceProcessor", "check_version"}, "Checks whether the version of the jplace format works with this parser."},
    {{"JplaceProcessor", "from_document"}, "Takes a JsonDocument object and parses it as a Jplace document into a PlacementMap object."},
    {{"JplaceProcessor", "from_file"}, "Reads a file and parses it as a Jplace document into a PlacementMap object."},
    {{"JplaceProcessor", "from_string"}, "Parses a string as a Jplace document into a PlacementMap object."},
    {{"JplaceProcessor", "get_version"}, "Returns the version number that this class is written for."},
    {{"JsonProcessor", "from_file"}, "Takes a JSON document file path and parses its contents into a JsonDocument."},
    {{"JsonProcessor", "from_string"}, "Takes a string containing a JSON document and parses its contents into a JsonDocument."},
    {{"JsonProcessor", "to_file"}, "Writes a Json file from a JsonDocument. Returns true iff successful."},
    {{"JsonProcessor", "to_string"}, "Gives the Json string representation of a JsonDocument."},
    {{"JsonProcessor", "to_string"}, "Returns the Json representation of a JsonDocument."},
    {{"JsonValueArray", "add"}, "Alias of push_back()."},
    {{"JsonValueArray", "at"}, "Provides index based array access to the array, doing a boundary check first."},
    {{"JsonValueArray", "cbegin"}, "Const version of begin()."},
    {{"JsonValueArray", "cend"}, "Const version of end()."},
    {{"JsonValueArray", "clear"}, "Clears all values, as if the array was newly created."},
    {{"JsonValueArray", "empty"}, "Returns whether the array is empty."},
    {{"JsonValueArray", "size"}, "Returns the number of values in the array."},
    {{"JsonValueObject", "at"}, "Provides index based array access to the object, doing a boundary check first. This is an alias for get()."},
    {{"JsonValueObject", "cbegin"}, "Const version of begin()."},
    {{"JsonValueObject", "cend"}, "Const version of end()."},
    {{"JsonValueObject", "clear"}, "Clears all values, as if the object was newly created."},
    {{"JsonValueObject", "empty"}, "Returns whether the object is empty."},
    {{"JsonValueObject", "erase"}, "Clears the value of a specific key; returns true iff this key existed."},
    {{"JsonValueObject", "get"}, "Returns the value of a certain key if present in the object, nullptr otherwise."},
    {{"JsonValueObject", "has"}, "Returns true iff the object contains a certain key."},
    {{"JsonValueObject", "set"}, "Sets the value for a certain key."},
    {{"JsonValueObject", "size"}, "Returns the number of values in the object."},
    {{"Lexer", "back"}, "Returns a reference to the last token."},
    {{"Lexer", "clear"}, "Clears all tokens, as if the object was newly created."},
    {{"Lexer", "dump"}, "Returns a listing of the parse result in readable form."},
    {{"Lexer", "empty"}, "Returns whether the list of tokens is empty."},
    {{"Lexer", "from_file"}, "Shortcut function that reads the contents of a file and then calls from_string()."},
    {{"Lexer", "from_string"}, "Process a string and store the resulting tokens in this Lexer object."},
    {{"Lexer", "has_error"}, "Returns whether there appeared an error while lexing."},
    {{"Lexer", "process_step"}, "Processes one step of the lexing."},
    {{"Lexer", "size"}, "Returns the number of tokens produced during the analysis process."},
    {{"Lexer", "validate_brackets"}, "Checkes whether the bracket tokes are validly nested."},
    {{"LexerIterator", "consume_head"}, "Removes all tokens up to (but excluding) the current one."},
    {{"LexerIterator", "has_error"}, "Returns whether there appeared an error while lexing."},
    {{"Logging", "get"}, "Getter for the singleton instance of log, is called by the standard macros."},
    {{"Logging", "get"}, "Getter for the singleton instance of log, is called by special macros that change the details of the log message."},
    {{"Logging", "level_to_string"}, "Return a string representation of a log level."},
    {{"Logging", "log_to_file"}, "Add an output file to which log messages are written."},
    {{"Logging", "log_to_stdout"}, "Add stdout as output stream to which log messages are written."},
    {{"Logging", "log_to_stream"}, "Add an output stream to which log messages are written."},
    {{"Logging", "max_level"}, "Get the highest log level that is reported."},
    {{"Logging", "max_level"}, "Set the highest log level that is reported."},
    {{"Logging", "report_percentage"}, "Get the current percentage for reporting LOG_PROG messages."},
    {{"Logging", "report_percentage"}, "set the percentage for reporting LOG_PROG messages."},
    {{"NewickBroker", "assign_ranks"}, "Iterate over the tree and assign ranks (= number of immediate children) to all nodes."},
    {{"NewickBroker", "at"}, "Provides index based array access to the nodes, doing a boundary check first."},
    {{"NewickBroker", "bottom"}, "Returns a reference to the bottom node of the tree stack."},
    {{"NewickBroker", "cbegin"}, "Const version of begin()."},
    {{"NewickBroker", "cend"}, "Const version of end()."},
    {{"NewickBroker", "clear"}, "Deletes all nodes from the broker."},
    {{"NewickBroker", "crbegin"}, "Const version of rbegin()."},
    {{"NewickBroker", "crend"}, "Const version of rend()."},
    {{"NewickBroker", "dump"}, "Return a readable string representation of the elements of the NewickBroker."},
    {{"NewickBroker", "empty"}, "Returns whether the stack is empty."},
    {{"NewickBroker", "leaf_count"}, "Returns the number of leaf nodes in the tree. assign_ranks() has to be called first."},
    {{"NewickBroker", "max_rank"}, "Returns the highest rank of the nodes in the tree. assign_ranks() has to be called first."},
    {{"NewickBroker", "rbegin"}, "Returns a reverse iterator to the nodes on the stack."},
    {{"NewickBroker", "rend"}, "Reverse version of end()."},
    {{"NewickBroker", "size"}, "Returns the size of the stack, i.e. the number of nodes stored in the broker."},
    {{"NewickBroker", "top"}, "Returns a reference to the top node of the tree stack."},
    {{"NewickBroker", "validate"}, "Returns true iff the tree is valid. assign_ranks() has to be called first."},
    {{"NewickProcessor", "build_tree"}, "Builds a Tree from a NewickBroker."},
    {{"NewickProcessor", "from_file"}, "Create a Tree from a file containing a Newick tree."},
    {{"NewickProcessor", "from_file"}, "Create a TreeSet from a file containing a list of Newick trees."},
    {{"NewickProcessor", "from_string"}, "Create a Tree from a string containing a Newick tree."},
    {{"NewickProcessor", "from_string"}, "Create a TreeSet from a string containing a list of Newick trees."},
    {{"NewickProcessor", "to_broker"}, "Stores the information of the tree into a NewickBroker object."},
    {{"NewickProcessor", "to_file"}, "Writes the tree to a file in Newick format."},
    {{"NewickProcessor", "to_string"}, "Gives a Newick string representation of the tree."},
    {{"NewickProcessor", "to_string"}, "Returns a Newick string representation of the tree."},
    {{"Options", "get_command_line"}, "Returns an array of strings containing the program's command line arguments."},
    {{"Options", "get_command_line_string"}, "Returns a string containing the program's command line arguments."},
    {{"Options", "init"}, "Init method that takes the program's command line arguments."},
    {{"PhyloXmlProcessor", "to_document"}, "Stores the information of the tree into an PhyloXML-formatted XmlDocument."},
    {{"PhyloXmlProcessor", "to_file"}, "Writes the tree to a file in PhyloXML format."},
    {{"PhyloXmlProcessor", "to_string"}, "Gives a PhyloXML string representation of the tree."},
    {{"PhyloXmlProcessor", "to_string"}, "Returns a PhyloXML string representation of the tree."},
    {{"PlacementMap", "center_of_gravity"}, "Calculate the Center of Gravity of the placements on a tree."},
    {{"PlacementMap", "clear"}, "Clears all data of this object."},
    {{"PlacementMap", "closest_leaf_depth_histogram"}, "Returns a histogram representing how many placements have which depth with respect to their closest leaf node."},
    {{"PlacementMap", "closest_leaf_distance_histogram"}, "Returns a histogram counting the number of placements that have a certain distance to their closest leaf node, divided into equally large intervals between a min and a max distance."},
    {{"PlacementMap", "closest_leaf_distance_histogram_auto"}, "Returns the same type of histogram as closest_leaf_distance_histogram(), but automatically determines the needed boundaries."},
    {{"PlacementMap", "dump"}, "Returns a list of all Pqueries with their Placements and Names."},
    {{"PlacementMap", "earth_movers_distance"}, "Calculates the Earth Movers Distance to another sets of placements on a fixed reference tree."},
    {{"PlacementMap", "earth_movers_distance"}, "Calculates the Earth Movers Distance between two sets of placements on a fixed reference tree."},
    {{"PlacementMap", "edge_num_map"}, "Returns a mapping of edge_num integers to the corresponding Edge object."},
    {{"PlacementMap", "merge"}, "Adds the pqueries from another PlacementMap objects to this one."},
    {{"PlacementMap", "normalize_weight_ratios"}, "Recalculates the like_weight_ratio of the placements of each Pquery so that their sum is 1.0, while maintaining their ratio to each other."},
    {{"PlacementMap", "placement_count"}, "Get the total number of placements in all pqueries."},
    {{"PlacementMap", "placement_mass"}, "Get the summed mass of all placements on the tree, given by their like_weight_ratio."},
    {{"PlacementMap", "restrain_to_max_weight_placements"}, "Removes all placements but the most likely one from all pqueries."},
    {{"PlacementMap", "validate"}, "Validates the integrity of the pointers, references and data in this Placement object."},
    {{"PlacementMap", "variance"}, "Calculate the variance of the placements on a tree."},
    {{"PlacementSimulator", "generate"}, "Generates n many Pqueries and places them in the PlacementMap."},
    {{"PlacementTreeEdgeData", "placement_count"}, "Returns the number of placements on this edge."},
    {{"PlacementTreeEdgeData", "placement_mass"}, "Returns the mass of the placements on this edge, as given by their like_weight_ratio."},
    {{"PlacementTreeEdgeData", "sort_placements"}, "Sorts the placements on this edge by their distance from the root, ascending."},
    {{"Sequence", "dump"}, "Prints the label and the whole sequence (possibly very long!)."},
    {{"Sequence", "remove_gaps"}, "Removes all occurences of gap_char from the sequence."},
    {{"Sequence", "replace"}, "Replaces all occurences of search by replace."},
    {{"SequenceSet", "clear"}, "Deletes all sequences from the alignment."},
    {{"SequenceSet", "dump"}, "Gives a summary of the sequences names and their lengths for this alignment."},
    {{"SequenceSet", "find_sequence"}, "Returns a pointer to a sequence with a specific label (or nullptr, if not found)."},
    {{"SequenceSet", "remove_gaps"}, "Calls remove_gaps() for every Sequence."},
    {{"SequenceSet", "remove_list"}, "Removes and deletes all those sequences from the Aligment whose labels are in the given list. If invert is set to true, it does the same inverted: it removes all except those in the list."},
    {{"SequenceSet", "replace"}, "Calls replace() for every Sequence."},
    {{"Tree", "clear"}, "Deletes all data of the tree, including all links, nodes and edges."},
    {{"Tree", "closest_leaf_depth_vector"}, "Returns a vector containing the closest leaf node for each node, measured in number of edges between them and its depth (number of edges between them)."},
    {{"Tree", "closest_leaf_distance_vector"}, "Returns a vector containing the closest leaf node for each node, using the branch_length as distance measure."},
    {{"Tree", "deepest_distance"}, "Returns the longest distance from any point in the tree (on the edges) to any leaf."},
    {{"Tree", "dump"}, "Returns a simple text representation of the Tree, showing all nodes, edges and links with their indices."},
    {{"Tree", "dump_lists"}, "Returns lists of all nodes, edges and links including their indices and connections with each other."},
    {{"Tree", "edge_count"}, "Returns the number of Edges of the Tree."},
    {{"Tree", "equal"}, "Compares the tree to another one given a binary comparator functional."},
    {{"Tree", "equal"}, "Compares two trees for equality given a binary comparator functional."},
    {{"Tree", "export_content"}, "Exports all elements of a tree."},
    {{"Tree", "find_node"}, "Find a Node, given its name."},
    {{"Tree", "has_identical_topology"}, "Returns true iff both trees have an identical topology."},
    {{"Tree", "import_content"}, "Imports all elements of a tree."},
    {{"Tree", "inner_count"}, "Count the number of inner nodes."},
    {{"Tree", "is_bifurcating"}, "Returns whether the Tree is bifurcating."},
    {{"Tree", "leaf_count"}, "Count the number of leaf nodes."},
    {{"Tree", "length"}, "Returns the length of the tree (sum of all branch lengths)."},
    {{"Tree", "link_count"}, "Returns the number of Links of the Tree."},
    {{"Tree", "max_rank"}, "Returns the highest rank of the nodes of the Tree."},
    {{"Tree", "node_count"}, "Returns the number of Nodes of the Tree."},
    {{"Tree", "node_depth_matrix"}, "The vector is indexed using the node()->index() for every node."},
    {{"Tree", "node_depth_vector"}, "Returns a vector containing the depth of all nodes with respect to the given start node."},
    {{"Tree", "node_distance_matrix"}, "Returns a distance matrix containing pairwise distances between all Nodes, using the branch_length of the Edges as distance measurement."},
    {{"Tree", "node_distance_vector"}, "If no Node pointer is provided, the root is taken as node."},
    {{"Tree", "swap"}, "Swap."},
    {{"TreeEdge", "dump"}, "Returns a one-line dump summary of the data of this edge."},
    {{"TreeEdge", "index"}, "Returns the index of this Link."},
    {{"TreeEdge", "primary_link"}, "Returns the link of this edge that points towards the root."},
    {{"TreeEdge", "primary_node"}, "Returns the node of this edge that points towards the root."},
    {{"TreeEdge", "secondary_link"}, "Returns the link of this edge that points away from the root."},
    {{"TreeEdge", "secondary_node"}, "Returns the node of this edge that points away from the root."},
    {{"TreeLink", "dump"}, "Returns a string containing dump information about this link."},
    {{"TreeLink", "edge"}, "Returns a pointer to the TreeEdge containing the data of this link's edge."},
    {{"TreeLink", "index"}, "Returns the index of this Link."},
    {{"TreeLink", "is_inner"}, "Returns true iff the node of this link is an inner node."},
    {{"TreeLink", "is_leaf"}, "Returns true iff the node of this link is a leaf node."},
    {{"TreeLink", "next"}, "Returns a pointer to the next link within the node."},
    {{"TreeLink", "node"}, "Returns a pointer to the TreeNode containing the data of this link's node."},
    {{"TreeLink", "outer"}, "Returns a pointer to the link of the adjacent node."},
    {{"TreeLink", "prev"}, "Returns a pointer to the previous link within the node."},
    {{"TreeNode", "dump"}, "Returns a one-line dump summary of the data of this node."},
    {{"TreeNode", "index"}, "Returns the index of this link."},
    {{"TreeNode", "is_inner"}, "True iff the node is an inner node."},
    {{"TreeNode", "is_leaf"}, "True iff the node is a leaf/tip."},
    {{"TreeNode", "link"}, "Returns the link of this node that points towards the root."},
    {{"TreeNode", "primary_link"}, "Returns the link of this node that points towards the root."},
    {{"TreeNode", "rank"}, "Rank of the node, i.e. how many immediate children it has."},
    {{"XmlProcessor", "to_file"}, "Writes an XML file from an XmlDocument. Returns true iff successful."},
    {{"XmlProcessor", "to_string"}, "Gives the XML string representation of a XmlDocument."},
    {{"XmlProcessor", "to_string"}, "Returns the XML representation of a XmlDocument."},
};

const char* get_docstring (const std::string& classname, const std::string& functionname)
{
    if (doc_strings_.count({classname, functionname}) > 0) {
        return doc_strings_[{classname, functionname}].c_str();
    } else {
        return "";
    }
}
